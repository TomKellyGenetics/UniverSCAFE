#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


#====================================================================================================================================================#
#<use>
$|++; #---turn on the auto flush for the progress bar
no warnings 'utf8';
use warnings;
use strict;
use File::Path;
use File::Copy;
use File::Basename;
use File::Spec::Functions qw(rel2abs abs2rel);
use Time::HiRes qw( time );
use Getopt::Long 'HelpMessage';
use threads ('stack_size' => 64*4096);
use threads::shared;
use List::Util qw (sum shuffle min max);
use Cwd 'abs_path';
use AutoLoader qw/AUTOLOAD/;
#<\use>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<doc>
=head1 SYNOPSIS

           5'-O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~AAA-3'
                        O~~~AA      O~~         O~       O~~~~~~~AO~~~~~~~~A
                      O~~    O~~ O~~   O~~     O~O~~     O~~      O~~       
                       O~~      O~~           O~  O~~    O~~      O~~       
                         O~~    O~~          O~~   O~~   O~~~~~AA O~~~~~~A  
                            O~~ O~~         O~~~~~A O~~  O~~      O~~       
                      O~~    O~~ O~~   O~~ O~~       O~~ O~~      O~~       
                        O~~~~A     O~~~   O~~         O~~O~~      O~~~~~~~AA
       ┌─ᐅ 5'-O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-3'
 ...===┴========================================================================================...

                      Single Cell Analysis of Five-prime End (SCAFE) Tool Suite 
                                   ---> scafe.tool.bk.pool <---
                      <--- tool, bulk mode, pool ctss of multiple samples --->

 Description:
   This tool pools multiple bulk CAGE ctss bed file

 Usage:
   scafe.tool.bk.pool [options] --lib_list_path --genome --outputPrefix --outDir
   
   --lib_list_path <required> [string]  a list of libraries, in formation of 
                                        <lib_ID><\t><long_ctss_bed><\t><collapse_ctss_bed>
                                        lib_ID = Unique ID of the cellbarcode
                                        long_ctss_bed = *long.ctss.bed.gz from scafe.tool.bk.bam_to_ctss.pl, 
                                        collapse_ctss_bed = *collapse.ctss.bed.gz from scafe.tool.bk.bam_to_ctss.pl, 
   --genome        <required> [string]  name of genome reference, e.g. hg19.gencode_v32lift37
   --outputPrefix  <required> [string]  prefix for the output files
   --outDir        <required> [string]  directory for the output files
   --max_thread    (optional) [integer] maximum number of parallel threads, capped at 10 to 
                                        avoid memory overflow (default=5)
   --overwrite     (optional) [yes/no]  erase outDir/outputPrefix before running (default=no)

 Dependencies:
   bedtools

 For demo, cd to SCAFE dir and run,
   scafe.tool.bk.pool \
   --overwrite=yes \
   --lib_list_path=./demo/input/bk.pool/lib_list_path.txt \
   --genome=hg19.gencode_v32lift37 \
   --outputPrefix=demo \
   --outDir=./demo/output/bk.pool/pool/

=head1 VERSION

1.0

=cut
#<\doc>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<lastCmdCalled>
#
#	notCalledBefore
#
#	notCalledBefore
#
#<\lastCmdCalled>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<global>
my $scriptDirPath = dirname(rel2abs($0));
my $scriptAbsPath = abs_path($0);
my ($curntTimeStamp) = &timeStamp();#->1102
my $ARGVStr = join "\n", (&currentTime(), $scriptAbsPath, @ARGV);#->325
my $globalReadmeHsh_ref = {};
our $tmplog_fh;
#<\global>
#====================================================================================================================================================#

#====================================================================================================================================================#
{	#Main sections lexical scope starts
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 0_startingTasks
#
#<section ID="startingTasks" num="0">
my ($lib_list_path, $max_thread, $genome, $outputPrefix, $outDir, $overwrite) = &readParameters();#->939
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 1_defineHardCodedParam
#
#<section ID="defineHardCodedParam" num="1">
my $paramTag = "$outputPrefix";
my $num_chunk = 100;
$max_thread = 10 if $max_thread > 10;
my $rm_tmp_file = 'yes';
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 2_defineOutDirPath
#
#<section ID="defineOutDirPath" num="2">
my @mkDirAry;
my $result_dir = "$outDir/$paramTag"; push @mkDirAry, $result_dir;
system "rm -rf $result_dir" if ($overwrite eq 'yes');
my $result_bed_dir = "$result_dir/bed/"; push @mkDirAry, $result_bed_dir;
my $result_log_dir = "$result_dir/log/"; push @mkDirAry, $result_log_dir;
my $result_tmp_dir = "$result_dir/tmp/"; push @mkDirAry, $result_tmp_dir;
my $result_script_dir = "$result_dir/script/"; push @mkDirAry, $result_script_dir;
foreach my $dir (@mkDirAry) {system ("mkdir -pm 755 $dir");}

open $tmplog_fh, ">", "$result_dir/00_screen_log.$curntTimeStamp.log.txt";
&logCalledCMDAndScript($ARGVStr, $result_script_dir, $scriptAbsPath);#->440
&printStartOrFinishMessage("startMessage");#->794
my ($bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin) = &checkAllExecutable();#->202
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 3_generate_chunk
#
#<section ID="generate_chunk" num="3">
my ($chrom_size_path) = &checkChromSizePath($genome);#->282
my ($chrom_size_hsh_ref) = &generateChromSizeHsh($chrom_size_path);#->343
my ($chunk_size) = &generateChunkSize($chrom_size_hsh_ref, $num_chunk);#->415
my ($chunk_info_hsh_ref) = &generateChunkInfoHsh($chrom_size_hsh_ref, $chunk_size, $result_tmp_dir);#->369
my ($lib_info_hsh_ref) = &readLibInfo($lib_list_path);#->914
&splitBedChunk($chunk_info_hsh_ref, $lib_info_hsh_ref, $max_thread, $result_tmp_dir);#->1007
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 4_convert
#
#<section ID="convert" num="4">
&processPerChunk($lib_info_hsh_ref, $bedtools_bin, $max_thread, $chunk_info_hsh_ref);#->828
&poolChunkResults($chunk_info_hsh_ref, $result_bed_dir, $result_log_dir, $paramTag, $result_tmp_dir, $rm_tmp_file);#->545
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 5_finishingTasks
#
#<section ID="finishingTasks" num="5">
&printOutputFileListAndReadme($ARGVStr, $paramTag, $outDir);#->679
&printStartOrFinishMessage("finishMessage");#->794
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
}	#Main sections lexical scope ends
#====================================================================================================================================================#

#====================================================================================================================================================#
#List of subroutines by category
#
#	general [n=5]:
#		currentTime, logCalledCMDAndScript, printStartOrFinishMessage
#		readParameters, timeStamp
#
#	log [n=1]:
#		reportAndLogStatus
#
#	output [n=1]:
#		printOutputFileListAndReadme
#
#	time [n=1]:
#		timeStamp
#
#	unassigned [n=12]:
#		checkAllExecutable, checkChromSizePath, checkChunkResults
#		generateChromSizeHsh, generateChunkInfoHsh, generateChunkSize
#		pileupCtss, poolChunkResults, poolLongCTSS
#		processPerChunk, readLibInfo, splitBedChunk
#
#====================================================================================================================================================#

sub checkAllExecutable {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|985
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|123
#	secondaryAppearInSection: >none
#	input: none
#	output: $bedGraphToBigWig_bin, $bedtools_bin, $bigWigAverageOverBed_bin, $cut_sh_path, $paraclu_bin, $samtools_bin
#	toCall: my ($bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin) = &checkAllExecutable();
#	calledInLine: 138
#....................................................................................................................................................#
	
	my $dirPath = dirname(rel2abs($0));

	my $bedtools_bin = "$dirPath/../resources/bin/bedtools/bedtools";
	my $samtools_bin = "$dirPath/../resources/bin/samtools/samtools";
	my $paraclu_bin = "$dirPath/../resources/bin/paraclu/paraclu";
	my $cut_sh_path = "$dirPath/../resources/bin/paraclu/paraclu-cut.sh";
	my $bedGraphToBigWig_bin = "$dirPath/../resources/bin/bedGraphToBigWig/bedGraphToBigWig";
	my $bigWigAverageOverBed_bin = "$dirPath/../resources/bin/bigWigAverageOverBed/bigWigAverageOverBed";
	
	&reportAndLogStatus("Checking all SCAFE executables", 10, "\n");#->985
	
	{
		my $stdOut = `$bedtools_bin --version 2>&1`;
		if ($stdOut =~ m/bedtools v(\S+)/) {
			&reportAndLogStatus("Checking: bedtools version: $1", 0, "\n");#->985
		} else {
			die "bedtools is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$samtools_bin 2>&1`;
		if ($stdOut =~ m/\s+(Version: \S+)\s+/) {
			&reportAndLogStatus("Checking: samtools version: $1", 0, "\n");#->985
		} else {
			die "samtools is not installed properly. Quitting.\n";
		}
	}
	
	{
		my $stdOut = `$paraclu_bin 2>&1`;
		if ($stdOut =~ m/paraclu: I need a minValue and a fileName/) {
			&reportAndLogStatus("Checking: paraclu found.", 0, "\n");#->985
		} else {
			die "paraclu is not installed properly. Quitting.\n";
		}
	}
	
	{
		my $stdOut = `$cut_sh_path 55C7128A 2>&1`;
		if ($stdOut =~ m/awk:/) {
			&reportAndLogStatus("Checking: paraclu-cut found.", 0, "\n");#->985
		} else {
			die "paraclu-cut is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bedGraphToBigWig_bin 2>&1`;
		if ($stdOut =~ m/bedGraphToBigWig v (\S+)/) {
			&reportAndLogStatus("Checking: bedGraphToBigWig version: $1", 0, "\n");#->985
		} else {
			die "bedGraphToBigWig not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bigWigAverageOverBed_bin 2>&1`;
		if ($stdOut =~ m/bigWigAverageOverBed v(\S+)/) {
			&reportAndLogStatus("Checking: bigWigAverageOverBed version: $1", 0, "\n");#->985
		} else {
			die "bigWigAverageOverBed is not installed properly. Quitting.\n";
		}
	}

	return ($bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin);
}
sub checkChromSizePath {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 3_generate_chunk|143
#	secondaryAppearInSection: >none
#	input: $genome
#	output: $chrom_size_path
#	toCall: my ($chrom_size_path) = &checkChromSizePath($genome);
#	calledInLine: 146
#....................................................................................................................................................#
	my ($genome) = @_;
	
	my $dirPath = dirname(rel2abs($0));
	my $chrom_size_path = "$dirPath/../resources/genome/$genome/tsv/chrom.sizes.tsv";
	die "genome $genome does not have chrom_size_path. Please rerun prep_genome step\n" if not -s $chrom_size_path;
	
	return ($chrom_size_path);
}
sub checkChunkResults {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|985
#	appearInSub: poolChunkResults|545, processPerChunk|828
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 4_convert|156
#	input: $chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref
#	output: $valid
#	toCall: my ($valid) = &checkChunkResults($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref);
#	calledInLine: 568, 866
#....................................................................................................................................................#
	my ($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref) = @_;
	
	my $valid = 'yes';
	foreach my $file_to_check (@{$file_check_ary_ref}) {
		my $file_path =  $chunk_info_hsh_ref->{$chunk_num}{$file_to_check};
		#&reportAndLogStatus("$file_path", 10, "\n");#->985
		$valid = 'no' if not -f $file_path;
	}
	
	return ($valid);
}
sub currentTime {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: printStartOrFinishMessage|794, reportAndLogStatus|985
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 2_defineOutDirPath|123, 5_finishingTasks|165
#	input: none
#	output: $runTime
#	toCall: my ($runTime) = &currentTime();
#	calledInLine: 94, 810, 814, 819, 823, 1001, 1002
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $runTime = sprintf "%04d-%02d-%02d %02d:%02d", $year+1900, $mon+1,$mday,$hour,$min;	
	
	return $runTime;
}
sub generateChromSizeHsh {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 3_generate_chunk|143
#	secondaryAppearInSection: >none
#	input: $chrom_size_path
#	output: $chrom_size_hsh_ref
#	toCall: my ($chrom_size_hsh_ref) = &generateChromSizeHsh($chrom_size_path);
#	calledInLine: 147
#....................................................................................................................................................#
	
	my ($chrom_size_path) = @_;
	
	my $chrom_size_hsh_ref = {};
	open (CHROMSIZE, "<", $chrom_size_path);
	while (<CHROMSIZE>) {
		chomp;
		my ($chrom, $size) = split /\s+/;
		$chrom_size_hsh_ref->{$chrom} = $size;
	}
	close CHROMSIZE;

	return ($chrom_size_hsh_ref);
}
sub generateChunkInfoHsh {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|985
#	appearInSub: >none
#	primaryAppearInSection: 3_generate_chunk|143
#	secondaryAppearInSection: >none
#	input: $chrom_size_hsh_ref, $chunk_size, $result_tmp_dir
#	output: $chunk_info_hsh_ref
#	toCall: my ($chunk_info_hsh_ref) = &generateChunkInfoHsh($chrom_size_hsh_ref, $chunk_size, $result_tmp_dir);
#	calledInLine: 149
#....................................................................................................................................................#
	my ($chrom_size_hsh_ref, $chunk_size, $result_tmp_dir) = @_;
	
	my $chunk_num = 1;
	my $chunk_info_hsh_ref = {};
	foreach my $chrom (sort {$a cmp $b} keys %{$chrom_size_hsh_ref}) {
		my $size = $chrom_size_hsh_ref->{$chrom};
		foreach (my $startPos = 0; $startPos <= $size; $startPos += $chunk_size) {
			my $endPos = $startPos + $chunk_size;
			$endPos = $size if ($endPos > $size);
			my $file_tag = "$chrom.$startPos.$endPos";
			
			my $size_in_chunk = $endPos - $startPos;
			&reportAndLogStatus("chunk $chunk_num contains $size_in_chunk nt covering $chrom $startPos to $endPos", 10, "\n");#->985

			my $chunk_unsort_long_ctss_bed_path = "$result_tmp_dir/$file_tag.unsorted.long.ctss.bed";
			my $chunk_long_ctss_bed_path = "$result_tmp_dir/$file_tag.long.ctss.bed";
			my $chunk_collapse_ctss_bed_path = "$result_tmp_dir/$file_tag.collapse.ctss.bed";
			my $chunk_ung_collapse_ctss_bed_path = "$result_tmp_dir/$file_tag.unencoded_G.collapse.ctss.bed";

			my ($chunk_chrom, $chunk_startPos, $chunk_endPos) = ($chrom, $startPos, $endPos);
			$chunk_info_hsh_ref->{$chunk_num}{'file_tag'} = $file_tag;
			$chunk_info_hsh_ref->{$chunk_num}{'loc'} = [$chunk_chrom, $chunk_startPos, $chunk_endPos];
			$chunk_info_hsh_ref->{$chunk_num}{'region_str'} = "$chunk_chrom:$chunk_startPos-$chunk_endPos";
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_unsort_long_ctss_bed_path'} = $chunk_unsort_long_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_long_ctss_bed_path'} = $chunk_long_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_collapse_ctss_bed_path'} = $chunk_collapse_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_ung_collapse_ctss_bed_path'} = $chunk_ung_collapse_ctss_bed_path;
			$chunk_num++;
			
		}
 	}

	return ($chunk_info_hsh_ref);
}
sub generateChunkSize {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 3_generate_chunk|143
#	secondaryAppearInSection: >none
#	input: $chrom_size_hsh_ref, $num_chunk
#	output: $chunk_size
#	toCall: my ($chunk_size) = &generateChunkSize($chrom_size_hsh_ref, $num_chunk);
#	calledInLine: 148
#....................................................................................................................................................#
	
	my ($chrom_size_hsh_ref, $num_chunk) = @_;
	
	my $total_size = 0;

	foreach my $chrom (keys %{$chrom_size_hsh_ref}) {
		$total_size += $chrom_size_hsh_ref->{$chrom};
	}
	
	my $chunk_size = int ($total_size/$num_chunk);

	return ($chunk_size);
}
sub logCalledCMDAndScript {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|123
#	secondaryAppearInSection: >none
#	input: $ARGVStr, $result_script_dir, $scriptAbsPath
#	output: 
#	toCall: &logCalledCMDAndScript($ARGVStr, $result_script_dir, $scriptAbsPath);
#	calledInLine: 136
#....................................................................................................................................................#
	my ($ARGVStr, $result_script_dir, $scriptAbsPath) = @_;


	my $cpScriptPath = "$result_script_dir/script.ran.pl";
	my $calledCMDPath = "$result_script_dir/called.cmd.txt";
	system "cp -f $scriptAbsPath $cpScriptPath";
	system "chmod 0444 $cpScriptPath"; #---[07/03/2014 18:02] make it read-only to make sure there'll be accodental change of parameters
	open CALLEDCMD, ">", $calledCMDPath;
	print CALLEDCMD join "", ($ARGVStr), "\n";
	close CALLEDCMD;
	
	return ();
}
sub pileupCtss {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|985
#	appearInSub: processPerChunk|828
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 4_convert|156
#	input: $chunk_collapse_ctss_bed_path, $chunk_long_ctss_bed_path, $chunk_num, $chunk_ung_collapse_ctss_bed_path
#	output: 
#	toCall: &pileupCtss($chunk_long_ctss_bed_path, $chunk_collapse_ctss_bed_path, $chunk_ung_collapse_ctss_bed_path, $chunk_num);
#	calledInLine: 879
#....................................................................................................................................................#
	my ($chunk_long_ctss_bed_path, $chunk_collapse_ctss_bed_path, $chunk_ung_collapse_ctss_bed_path, $chunk_num) = @_;

	my $num_proc = 0;
	my $tmp_CTSS_hsh_ref = {};
	my $last_chrom = 'initial';
	my $last_start = 'initial';
	my $last_strand = 'initial';
	open INCTSS, "<", $chunk_long_ctss_bed_path;
	open OUTCBCOLLAPSECTSS, ">", $chunk_collapse_ctss_bed_path;
	open UNGOUTCBCOLLAPSECTSS, ">", $chunk_ung_collapse_ctss_bed_path;
	while (<INCTSS>) {
		chomp;
		my ($chrom, $start, $end, $MAPQ, $num_unencoded_G, $strand) = split /\t/;

		$tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'all'}++;
		$tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'ung'}++ if $num_unencoded_G > 0;
	
		if ($last_chrom eq 'initial') {
			$last_chrom = $chrom;
			$last_start = $start;
			$last_strand = $strand;
		}

		if (($chrom ne $last_chrom or $start ne $last_start or $strand ne $last_strand)) {
			my $last_end = $last_start + 1;

			my $num_total_ctss = $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand}{'all'};
			print OUTCBCOLLAPSECTSS join "", (join "\t", ($last_chrom, $last_start, $last_end, $num_total_ctss, $num_total_ctss, $last_strand)), "\n";

			if (exists $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand}{'ung'}) {
				my $num_ung_ctss = $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand}{'ung'};
				print UNGOUTCBCOLLAPSECTSS join "", (join "\t", ($last_chrom, $last_start, $last_end, $num_total_ctss, $num_ung_ctss, $last_strand)), "\n";
			}

			delete $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand};
			$last_chrom = $chrom;
			$last_start = $start;
			$last_strand = $strand;
			$num_proc++;
			if ($num_proc%10000 == 0) {
				&reportAndLogStatus("$num_proc CTSS piled up", 10, "\n");#->985
			}
		}
	
		if (eof(INCTSS)) {
			foreach my $chrom (keys %{$tmp_CTSS_hsh_ref}) {
				foreach my $start (keys %{$tmp_CTSS_hsh_ref->{$chrom}}) {
					my $end = $start + 1;
					foreach my $strand (keys %{$tmp_CTSS_hsh_ref->{$chrom}{$start}}) {

						my $num_total_ctss = $tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'all'};
						print OUTCBCOLLAPSECTSS join "", (join "\t", ($chrom, $start, $end, $num_total_ctss, $num_total_ctss, $strand)), "\n";

						if (exists $tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'ung'}) {
							my $num_ung_ctss = $tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'ung'};
							print UNGOUTCBCOLLAPSECTSS join "", (join "\t", ($chrom, $start, $end, $num_total_ctss, $num_ung_ctss, $strand)), "\n";
						}
					}
				}
			}
		}
	}
	close INCTSS;
	close OUTCBCOLLAPSECTSS;
	close UNGOUTCBCOLLAPSECTSS;

	return ();
}
sub poolChunkResults {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: checkChunkResults|302, reportAndLogStatus|985
#	appearInSub: >none
#	primaryAppearInSection: 4_convert|156
#	secondaryAppearInSection: >none
#	input: $chunk_info_hsh_ref, $paramTag, $result_bed_dir, $result_log_dir, $result_tmp_dir, $rm_tmp_file
#	output: 
#	toCall: &poolChunkResults($chunk_info_hsh_ref, $result_bed_dir, $result_log_dir, $paramTag, $result_tmp_dir, $rm_tmp_file);
#	calledInLine: 160
#....................................................................................................................................................#
	my ($chunk_info_hsh_ref, $result_bed_dir, $result_log_dir, $paramTag, $result_tmp_dir, $rm_tmp_file) = @_;
	
	my $ung_collapse_ctss_bed_path = "$result_bed_dir/$paramTag.pool.unencoded_G.collapse.ctss.bed";
	my $collapse_ctss_bed_path = "$result_bed_dir/$paramTag.pool.collapse.ctss.bed";
	my $long_ctss_bed_path = "$result_bed_dir/$paramTag.pool.long.ctss.bed";

	open LONGCTSS, ">$long_ctss_bed_path";
	open COLLAPSECTSS, ">$collapse_ctss_bed_path";
	open UNGCOLLAPSECTSS, ">$ung_collapse_ctss_bed_path";
	
	foreach my $chunk_num (sort {$a <=> $b} keys %{$chunk_info_hsh_ref}) {
		my $file_check_ary_ref = [qw/chunk_long_ctss_bed_path chunk_collapse_ctss_bed_path chunk_ung_collapse_ctss_bed_path/];
		my ($valid) = &checkChunkResults($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref);#->302

		if ($valid eq 'yes') {
			&reportAndLogStatus("results of chunk $chunk_num is found. start parsing.", 10, "\n");#->985
			my $chunk_long_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_long_ctss_bed_path'};
			my $chunk_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_collapse_ctss_bed_path'};
			my $chunk_ung_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_ung_collapse_ctss_bed_path'};
			
			open (CHUNKLONG, "<", $chunk_long_ctss_bed_path);
			while (<CHUNKLONG>) {
				print LONGCTSS $_;
			}
			close CHUNKLONG;

			open (UNGCHUNKCOLLAPSE, "<", $chunk_ung_collapse_ctss_bed_path);
			while (<UNGCHUNKCOLLAPSE>) {
				print UNGCOLLAPSECTSS $_;
			}
			close UNGCHUNKCOLLAPSE;

			open (CHUNKCOLLAPSE, "<", $chunk_collapse_ctss_bed_path);
			while (<CHUNKCOLLAPSE>) {
				print COLLAPSECTSS $_;
			}
			close CHUNKCOLLAPSE;
		
			if ($rm_tmp_file eq 'yes') {
				system ("rm $chunk_long_ctss_bed_path");
				system ("rm $chunk_collapse_ctss_bed_path");
				system ("rm $chunk_ung_collapse_ctss_bed_path");
			}
			
		} else {
			die "results of chunk $chunk_num is not found. quitting\n";
		}
	}
	
	&reportAndLogStatus("Compressing pool bed files", 10, "\n");#->985

	my $threadID = 1;
	my %itemForThrHsh = ();
	foreach my $itemID ($ung_collapse_ctss_bed_path, $collapse_ctss_bed_path, $long_ctss_bed_path) {
		push @{$itemForThrHsh{$threadID}} , $itemID;
		$threadID++;
	}
	
	my %threadHsh =();
	foreach my $threadID (sort keys %itemForThrHsh) {
		my $itemForThrAry_ref = $itemForThrHsh{$threadID};
		($threadHsh{$threadID}) = threads->new(#---refer to http://www.perlmonks.org/?node_id=966781, the 
	
			sub {
				my ($itemForThrAry_ref) = @_;

				foreach my $itemID (@{$itemForThrAry_ref}) {
					system "gzip -f $itemID";
				}
				
				return ();
			}
			,($itemForThrAry_ref)
		);
	}
	
	while (keys %threadHsh) {
		foreach my $threadID (keys %threadHsh) {
			if (not $threadHsh{$threadID}->is_running()) {
				$threadHsh{$threadID}->join;
				delete $threadHsh{$threadID};
			}
		}
		sleep 1;
	}
	
	return ();
}
sub poolLongCTSS {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|985
#	appearInSub: processPerChunk|828
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 4_convert|156
#	input: $chunk_info_hsh_ref, $chunk_long_ctss_bed_path, $chunk_num, $chunk_unsort_long_ctss_bed_path
#	output: 
#	toCall: &poolLongCTSS($chunk_unsort_long_ctss_bed_path, $chunk_long_ctss_bed_path, $chunk_info_hsh_ref, $chunk_num);
#	calledInLine: 878
#....................................................................................................................................................#
	my ($chunk_unsort_long_ctss_bed_path, $chunk_long_ctss_bed_path, $chunk_info_hsh_ref, $chunk_num) = @_;

	open OUTFILE, ">$chunk_unsort_long_ctss_bed_path";
	foreach my $libID (keys %{$chunk_info_hsh_ref->{$chunk_num}{'lib_chunk_bed_path'}}) {
		my $lib_chunk_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'lib_chunk_bed_path'}{$libID};
		open (FILEIN, "<", $lib_chunk_bed_path);
		&reportAndLogStatus("pooling $libID in chunk $chunk_num long ctss", 10, "\n");#->985
		while (<FILEIN>) {
			print OUTFILE $_;
		}
		close FILEIN;
		system "rm -f $lib_chunk_bed_path";
	}

	&reportAndLogStatus("sorting in chunk $chunk_num.", 10, "\n");#->985
	system "sort -k2,2n -k6,6 $chunk_unsort_long_ctss_bed_path >$chunk_long_ctss_bed_path";
	system "rm $chunk_unsort_long_ctss_bed_path";
	
	close OUTFILE;
	
	return ();
}
sub printOutputFileListAndReadme {
#....................................................................................................................................................#
#	subroutineCategory: output
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 5_finishingTasks|165
#	secondaryAppearInSection: >none
#	input: $ARGVStr, $outDir, $paramTag
#	output: 
#	toCall: &printOutputFileListAndReadme($ARGVStr, $paramTag, $outDir);
#	calledInLine: 168
#....................................................................................................................................................#
	my ($ARGVStr, $paramTag, $outDir) = @_;
	
	my $outputFileListPath = "$outDir/$paramTag/output.file.list.txt";
	open (OUTFILELIST, ">", $outputFileListPath);

	my %dirHsh = ();
	my %filelistLenCountHsh = ();
	push @{$filelistLenCountHsh{'dir'}}, length 'Directory';
	push @{$filelistLenCountHsh{'name'}}, length 'Name';
	push @{$filelistLenCountHsh{'description'}}, length 'Description';
	
	foreach my $outputFilePath (sort {$a cmp $b} keys %{$globalReadmeHsh_ref}) {
		my $fileDescription =  $globalReadmeHsh_ref->{$outputFilePath}{'description'};
		my $cleandOutputFilePath = $outputFilePath;
		$cleandOutputFilePath =~ s/\/+/\//g;
		
		my ($filePrefix, $fileDir, $fileSuffix) = fileparse($cleandOutputFilePath, qr/\.[^.]*/);
		$fileDir =~ s/^$outDir//;
		my $fileName = $filePrefix.$fileSuffix;
		$dirHsh{$fileDir}{$fileName} = $fileDescription;
		push @{$filelistLenCountHsh{'dir'}}, length $fileDir;
		push @{$filelistLenCountHsh{'name'}}, length $fileName;
		push @{$filelistLenCountHsh{'description'}}, length $fileDescription;
		
		open README, ">", "$outputFilePath.readme.txt";
		print README "=================\n";
		print README "File descriptions\n";
		print README "=================\n";
		print README "$fileDescription\n";
					
		if (exists $globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}) {
			my @colLenCountHsh = (length 'column');
			push @colLenCountHsh, length $_ foreach (@{$globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}});
			my $headerColLen = max(@colLenCountHsh)+2;
			print README "\n";
			print README "\n";
			print README "===================\n";
			print README "Column descriptions\n";
			print README "===================\n";
			print README "\n";
			printf README "%-".$headerColLen."s", 'column';
			print README "description\n";
			printf README "%-".$headerColLen."s", '------';
			print README "-----------\n";
			foreach my $header (@{$globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}}) {
				my $columnDescription = 'self-explanatory';
				$columnDescription = $globalReadmeHsh_ref->{$outputFilePath}{'header'}{$header} if exists $globalReadmeHsh_ref->{$outputFilePath}{'header'}{$header};
				printf README "%-".$headerColLen."s", $header;
				print README $columnDescription."\n";
			}
		}
		
		if (exists $globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}) {
			print README "\n";
			print README "\n";
			print README "=================\n";
			print README "Extra information\n";
			print README "=================\n";
			print README "\n";
			foreach my $title (sort keys %{$globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}}) {
				print README "$title\n";
				print README "-" foreach (1..length $title);
				print README "\n";
				print README "$_\n" foreach @{$globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}{$title}};
			}
		}
		
		print README "\n";
		print README "\n";
		print README "~" foreach (1..length "$fileName was created from running,");
		print README "\n";
		print README "$fileName was created from running,\n";
		print README "\n";
		print README "$ARGVStr\n";
		print README "\n";
		close README;
	}

	my $fileDir_colLen = max(@{$filelistLenCountHsh{'dir'}})+2;
	my $fileName_colLen = max(@{$filelistLenCountHsh{'name'}})+2;
	my $fileDescription_colLen = max(@{$filelistLenCountHsh{'description'}})+2;
	printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", 'directory', 'name', 'description');
	printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", '=========', '====', '===========');
	foreach my $fileDir (sort {$a cmp $b} keys %dirHsh) {
		foreach my $fileName (sort {$a cmp $b} keys %{$dirHsh{$fileDir}}) {
			my $fileDescription = $dirHsh{$fileDir}{$fileName};	
			printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", $fileDir, $fileName, $fileDescription);
		}
	}
	
	print OUTFILELIST "\n";
	print OUTFILELIST "\n";
	print OUTFILELIST "~" foreach (1..length "The above files were generated by running,");
	print OUTFILELIST "\n";
	print OUTFILELIST "The above files were generated by running,\n";
	print OUTFILELIST "\n";
	print OUTFILELIST "$ARGVStr\n";
	print OUTFILELIST "\n";

	close OUTFILELIST;

	return ();
}
sub printStartOrFinishMessage {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: currentTime|325
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|123, 5_finishingTasks|165
#	secondaryAppearInSection: >none
#	input: $StartOrFinishMessage
#	output: none
#	toCall: &printStartOrFinishMessage($StartOrFinishMessage);
#	calledInLine: 137, 169
#....................................................................................................................................................#

	my ($StartOrFinishMessage) = @_;
	
	if ($StartOrFinishMessage eq "startMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] starts running ...... \n";#->325
		print "=========================================================================\n\n";

		print $tmplog_fh "\n=========================================================================\n";
		print $tmplog_fh "[".&currentTime()."] starts running ...... \n";#->325
		print $tmplog_fh "=========================================================================\n\n";

	} elsif ($StartOrFinishMessage eq "finishMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] finished running .......\n";#->325
		print "=========================================================================\n\n";

		print $tmplog_fh "\n=========================================================================\n";
		print $tmplog_fh "[".&currentTime()."] finished running .......\n";#->325
		print $tmplog_fh "=========================================================================\n\n";
	}
}
sub processPerChunk {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: checkChunkResults|302, pileupCtss|465, poolLongCTSS|645, reportAndLogStatus|985
#	appearInSub: >none
#	primaryAppearInSection: 4_convert|156
#	secondaryAppearInSection: >none
#	input: $bedtools_bin, $chunk_info_hsh_ref, $lib_info_hsh_ref, $max_thread
#	output: 
#	toCall: &processPerChunk($lib_info_hsh_ref, $bedtools_bin, $max_thread, $chunk_info_hsh_ref);
#	calledInLine: 159
#....................................................................................................................................................#
	my ($lib_info_hsh_ref, $bedtools_bin, $max_thread, $chunk_info_hsh_ref) = @_;

	my %itemForThrHsh = ();
	my $threadID = 1;
	my $chrom_info_hsh_ref = {};
	my $total_num_chunk = keys %{$chunk_info_hsh_ref};
	foreach my $chunk_num (keys %{$chunk_info_hsh_ref}) {
		$threadID = 1 if $threadID > $max_thread;
		$itemForThrHsh{$threadID}{$chunk_num}++;
		$threadID++;
	}
	my $num_proc : shared = 0;

	my %threadHsh =();
	foreach my $threadID (sort {$a <=> $b} keys %itemForThrHsh) {
		my $itemForThrHsh_ref = $itemForThrHsh{$threadID};
		($threadHsh{$threadID}) = threads->new(#---refer to http://www.perlmonks.org/?node_id=966781, the 
	
			sub {
				
				my ($itemForThrHsh_ref) = @_;
				my $total_chunk = keys %{$itemForThrHsh_ref};
				
				&reportAndLogStatus("$total_chunk chunks spawned to thread $threadID.", 10, "\n");#->985
				foreach my $chunk_num (keys %{$itemForThrHsh_ref}) {
					
					my $file_check_ary_ref = [qw/chunk_long_ctss_bed_path chunk_collapse_ctss_bed_path chunk_ung_collapse_ctss_bed_path/];
					my ($valid) = &checkChunkResults($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref);#->302

					if ($valid eq 'yes') {
						&reportAndLogStatus("results of chunk $chunk_num is found. skipping", 10, "\n");#->985

					} else {
						&reportAndLogStatus("start processing chunk $chunk_num in thread $threadID.", 10, "\n");#->985
						my $chunk_unsort_long_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_unsort_long_ctss_bed_path'};
						my $chunk_long_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_long_ctss_bed_path'};
						my $chunk_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_collapse_ctss_bed_path'};
						my $chunk_ung_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_ung_collapse_ctss_bed_path'};

						&poolLongCTSS($chunk_unsort_long_ctss_bed_path, $chunk_long_ctss_bed_path, $chunk_info_hsh_ref, $chunk_num);#->645
						&pileupCtss($chunk_long_ctss_bed_path, $chunk_collapse_ctss_bed_path, $chunk_ung_collapse_ctss_bed_path, $chunk_num);#->465
					}
					$num_proc++;
					&reportAndLogStatus("$num_proc of $total_num_chunk chunks are finised.", 10, "\n");#->985
				}
				return ();
			}
			,($itemForThrHsh_ref)
		);
	}
	
	while (keys %threadHsh) {

		my @threads = threads->list();
		my $thread_count = threads->list();
		my @running = threads->list(threads::running);
		my @joinable = threads->list(threads::joinable);
		my $running_count = @running;
		my $joinable_count = @joinable;

		&reportAndLogStatus("$thread_count threads exists. $running_count running and $joinable_count joinable", 10, "\n");#->985

		foreach my $threadID (keys %threadHsh) {
			if (not $threadHsh{$threadID}->is_running() or $threadHsh{$threadID}->is_joinable() or $threadHsh{$threadID}->is_detached()) {
				&reportAndLogStatus("thread $threadID is finishing.", 10, "\n");#->985
				$threadHsh{$threadID}->join();
				delete $threadHsh{$threadID};
			}
		}
		sleep 1;
	}

	return ();
}
sub readLibInfo {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 3_generate_chunk|143
#	secondaryAppearInSection: >none
#	input: $lib_list_path
#	output: $lib_info_hsh_ref
#	toCall: my ($lib_info_hsh_ref) = &readLibInfo($lib_list_path);
#	calledInLine: 150
#....................................................................................................................................................#
	my ($lib_list_path) = @_;
	
	my $lib_info_hsh_ref = {};
	open LIBINFO, "<", $lib_list_path;
	while (<LIBINFO>) {
		chomp;
		my ($libID, $long_ctss_bed_path, $collapse_ctss_bed_path) = split /\t/;
		$lib_info_hsh_ref->{$libID}{'long_ctss_bed_path'} = $long_ctss_bed_path;
		$lib_info_hsh_ref->{$libID}{'collapse_ctss_bed_path'} = $collapse_ctss_bed_path;
	}

	return ($lib_info_hsh_ref);
}
sub readParameters {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 0_startingTasks|105
#	secondaryAppearInSection: >none
#	input: none
#	output: $genome, $lib_list_path, $max_thread, $outDir, $outputPrefix, $overwrite
#	toCall: my ($lib_list_path, $max_thread, $genome, $outputPrefix, $outDir, $overwrite) = &readParameters();
#	calledInLine: 108
#....................................................................................................................................................#
	
	my ($lib_list_path, $max_thread, $genome, $outputPrefix, $outDir, $overwrite);
	
	$overwrite = 'no';
	$max_thread = 5;

	GetOptions 	(
		"lib_list_path=s"	=>	\$lib_list_path,
		"max_thread:i"		=>	\$max_thread,
		"genome=s"			=>	\$genome,
		"outputPrefix=s"	=>	\$outputPrefix,
		"outDir:s"			=>	\$outDir,
		"overwrite:s"		=>	\$overwrite,
		'help'				=>	sub { HelpMessage(0) },
	) or HelpMessage(1);

	HelpMessage(1) unless $lib_list_path;
	
	#---check file
	my $file_check_hsh_ref = {
		'lib_list_path' => $lib_list_path,
	};
	
	foreach my $option_name (keys %{$file_check_hsh_ref}) {
		my $file_path = $file_check_hsh_ref->{$option_name};
		die "Quitting: File $option_name does not exists at $file_path" if not -s $file_path;
	}
	
	chop $outDir if ($outDir =~ m/\/$/); #---remove the last slash
	system "mkdir -p -m 755 $outDir/";
	
	return($lib_list_path, $max_thread, $genome, $outputPrefix, $outDir, $overwrite);

}
sub reportAndLogStatus {
#....................................................................................................................................................#
#	subroutineCategory: log
#	dependOnSub: currentTime|325
#	appearInSub: checkAllExecutable|202, checkChunkResults|302, generateChunkInfoHsh|369, pileupCtss|465, poolChunkResults|545, poolLongCTSS|645, processPerChunk|828, splitBedChunk|1007
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 2_defineOutDirPath|123, 3_generate_chunk|143, 4_convert|156
#	input: $lineEnd, $message, $numTrailingSpace
#	output: 
#	toCall: &reportAndLogStatus($message, $numTrailingSpace, $lineEnd);
#	calledInLine: 223, 228, 237, 246, 255, 264, 273, 318, 392, 516, 571, 605, 662, 670, 862, 869, 872, 882, 899, 903, 1045, 1069
#....................................................................................................................................................#
	my ($message, $numTrailingSpace, $lineEnd) = @_;

	my $trailingSpaces = '';
	$trailingSpaces .= " " for (1..$numTrailingSpace);
	
	print "[".&currentTime()."] ".$message.$trailingSpaces.$lineEnd;#->325
	print $tmplog_fh "[".&currentTime()."] ".$message.$lineEnd if $lineEnd ne "\r";#->325
	
	return ();
}
sub splitBedChunk {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|985
#	appearInSub: >none
#	primaryAppearInSection: 3_generate_chunk|143
#	secondaryAppearInSection: >none
#	input: $chunk_info_hsh_ref, $lib_info_hsh_ref, $max_thread, $result_tmp_dir
#	output: 
#	toCall: &splitBedChunk($chunk_info_hsh_ref, $lib_info_hsh_ref, $max_thread, $result_tmp_dir);
#	calledInLine: 151
#....................................................................................................................................................#
	my ($chunk_info_hsh_ref, $lib_info_hsh_ref, $max_thread, $result_tmp_dir) = @_;
	
	my $chunk_chrom_pos_hsh_ref = {};
	foreach my $chunk_num (keys %{$chunk_info_hsh_ref}) {
		my ($chunk_chrom, $chunk_startPos, $chunk_endPos) = @{$chunk_info_hsh_ref->{$chunk_num}{'loc'}};
		$chunk_chrom_pos_hsh_ref->{$chunk_chrom}{$chunk_num} = [$chunk_startPos, $chunk_endPos];
	}
	
	my %itemForThrHsh = ();
	my $threadID = 1;
	foreach my $libID (shuffle(keys %{$lib_info_hsh_ref})) {
		$threadID = 1 if $threadID > $max_thread;
		push @{$itemForThrHsh{$threadID}} , $libID;
		$threadID++;
	}
	
	my %threadHsh =();
	foreach my $threadID (sort keys %itemForThrHsh) {
		my $itemForThrAry_ref = $itemForThrHsh{$threadID};
		($threadHsh{$threadID}) = threads->new(#---refer to http://www.perlmonks.org/?node_id=966781, the 
	
			sub {
				my ($itemForThrAry_ref) = @_;
				my $chunk_bed_inThr_hsh_ref = {};

				foreach my $libID (@{$itemForThrAry_ref}) {
					#---[2/19/16 13:13] do something on the item here
					&reportAndLogStatus("Spliting $libID bed into chunks", 10, "\n");#->985
					my $long_ctss_bed_path = $lib_info_hsh_ref->{$libID}{'long_ctss_bed_path'};
					my $bed_FH_hsh_ref = {};
					
					if ($long_ctss_bed_path =~ m/\.gz$/) {
						open (INFILE, " gzip -dc $long_ctss_bed_path|");
					} else {
						open (INFILE, "<", $long_ctss_bed_path);
					}
					while (<INFILE>) {
						my ($chrom, $start, $end) = split /\t/;
						my $hit_chunk_num;
						next if not exists $chunk_chrom_pos_hsh_ref->{$chrom};
						foreach my $chunk_num (sort keys %{$chunk_chrom_pos_hsh_ref->{$chrom}}) {
							if ($end >= $chunk_chrom_pos_hsh_ref->{$chrom}{$chunk_num}[0] and $end <= $chunk_chrom_pos_hsh_ref->{$chrom}{$chunk_num}[1]) {
								$hit_chunk_num = $chunk_num;
								last;
							}
						}
						die if not defined $hit_chunk_num;
						my $file_tag = $chunk_info_hsh_ref->{$hit_chunk_num}{'file_tag'};
						if (not $bed_FH_hsh_ref->{$hit_chunk_num}) {
							my $lib_chunk_bed_path = "$result_tmp_dir/lib.$libID.$file_tag.bed";
							open $bed_FH_hsh_ref->{$hit_chunk_num}, ">", $lib_chunk_bed_path;
							&reportAndLogStatus("Creating chunk $hit_chunk_num for $libID", 10, "\n");#->985
							$chunk_bed_inThr_hsh_ref->{$hit_chunk_num}{'lib_chunk_bed_path'}{$libID} = $lib_chunk_bed_path;
						}
						print {$bed_FH_hsh_ref->{$hit_chunk_num}} $_;
					}
					close INFILE;
				}
				
				return ($chunk_bed_inThr_hsh_ref);
			}
			,($itemForThrAry_ref)
		);
	}
	
	my $data_hsh_ref = {};
	while (keys %threadHsh) {
		foreach my $threadID (keys %threadHsh) {
			if (not $threadHsh{$threadID}->is_running()) {
				my ($chunk_bed_inThr_hsh_ref) = $threadHsh{$threadID}->join;
				foreach my $chunk_num (keys %{$chunk_bed_inThr_hsh_ref}) {
					foreach my $libID (keys %{$chunk_bed_inThr_hsh_ref->{$chunk_num}{'lib_chunk_bed_path'}}) {
						$chunk_info_hsh_ref->{$chunk_num}{'lib_chunk_bed_path'}{$libID} = $chunk_bed_inThr_hsh_ref->{$chunk_num}{'lib_chunk_bed_path'}{$libID};
					}
				}
				delete $threadHsh{$threadID};
			}
		}
		sleep 1;
	}
	
	return ();
}
sub timeStamp {
#....................................................................................................................................................#
#	subroutineCategory: time, general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: >none
#	secondaryAppearInSection: >none
#	input: none
#	output: $curntTimeStamp
#	toCall: my ($curntTimeStamp) = &timeStamp();
#	calledInLine: 93
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $curntTimeStamp = sprintf "%04d.%02d.%02d.%02d.%02d.%02d", $year+1900,$mon+1,$mday,$hour,$min,$sec;	

	return ($curntTimeStamp);
}

exit;


















































